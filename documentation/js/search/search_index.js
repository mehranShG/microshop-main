var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.375,1,2.035]],["body/modules/AppModule.html",[0,1.735,1,3.798,2,1.351,3,1.899,4,2.374,5,2.374,6,3.157,7,0.033,8,3.157,9,3.157,10,2.304,11,1.64,12,1.64,13,0.328,14,0.328,15,0.288,16,2.85,17,2.968,18,0.77,19,3.336,20,2.85,21,0.737,22,4.005,23,5.022,24,2.374,25,4.005,26,2.374,27,2.374,28,1.64,29,2.061,30,1.484,31,2.85,32,1.735,33,2.374,34,1.64,35,1.589,36,2.061,37,2.85,38,2.85,39,2.85,40,4.005,41,2.664,42,2.85,43,2.85,44,2.85,45,2.85,46,0.37,47,2.85,48,2.85,49,2.85,50,2.85,51,2.85,52,1.64,53,2.85,54,1.64,55,2.85,56,2.85,57,2.85,58,1.827,59,2.85,60,2.374,61,1.827,62,2.85,63,2.85,64,0.328,65,0.015,66,0.021,67,0.021]],["title/controllers/AuthController.html",[68,1.062,69,2.035]],["body/controllers/AuthController.html",[7,0.033,13,0.271,14,0.271,15,0.237,18,0.738,21,0.608,32,1.99,33,1.959,34,1.353,35,1.383,36,1.701,46,0.54,64,0.271,65,0.012,66,0.018,67,0.018,68,0.787,69,2.235,70,0.933,71,1.959,72,1.353,73,1.959,74,0.271,75,1.383,76,1.513,77,3.827,78,3.486,79,3.827,80,2.904,81,1.295,82,2.352,83,3.486,84,0.823,85,2.352,86,1.823,87,2.436,88,3.486,89,1.074,90,1.959,91,3.486,92,2.352,93,1.513,94,1.778,95,1.074,96,0.663,97,2.352,98,2.643,99,2.352,100,3.486,101,2.352,102,2.352,103,3.293,104,2.352,105,3.486,106,2.352,107,3.46,108,1.701,109,1.019,110,1.508,111,1.508,112,1.959,113,1.701,114,3.547,115,1.508,116,1.508,117,0.856,118,1.959,119,2.352,120,1.969,121,1.701,122,2.352,123,2.352,124,1.225,125,1.115,126,2.352,127,2.352,128,1.383,129,1.353,130,1.653,131,1.959,132,2.352,133,1.959,134,2.352,135,2.352,136,2.352,137,2.352,138,1.823,139,2.352,140,2.352,141,2.352,142,2.352,143,2.352,144,2.352,145,2.352]],["title/entities/AuthEntity.html",[35,1.26,146,1.827]],["body/entities/AuthEntity.html",[7,0.033,13,0.273,14,0.273,15,0.24,18,0.456,32,2.423,34,1.366,35,1.393,41,3.452,46,0.75,52,2.404,58,1.522,64,0.273,65,0.012,66,0.018,67,0.018,73,1.978,74,0.273,81,1.627,84,1.033,89,0.908,96,1.178,146,2.02,147,1.978,148,1.174,149,3.021,150,4.177,151,2.404,152,3.021,153,3.021,154,3.021,155,3.48,156,4.177,157,2.578,158,4.925,159,2.375,160,2.375,161,3.511,162,3.511,163,3.511,164,2.375,165,2.375,166,3.845,167,3.48,168,2.375,169,2.375,170,2.375,171,2.375,172,3.48,173,2.375,174,2.375,175,2.375,176,2.375,177,3.48,178,2.375,179,4.659,180,2.375,181,3.511,182,3.511,183,1.366,184,1.978,185,4.925]],["title/modules/AuthModule.html",[0,1.375,6,1.827]],["body/modules/AuthModule.html",[0,1.927,2,1.575,3,2.109,6,3.434,7,0.033,10,2.56,11,1.912,12,1.912,13,0.382,14,0.382,15,0.335,17,2.13,18,0.785,21,0.859,29,2.402,30,1.73,32,1.927,34,1.912,35,1.318,61,2.852,64,0.382,65,0.017,66,0.023,67,0.023,69,3.215,70,1.766,120,2.726,121,2.402,186,2.768,187,2.768,188,3.308,189,3.322,190,3.707,191,2.768,192,2.13,193,2.402,194,3.322,195,2.402,196,3.322,197,2.768,198,2.768,199,3.322,200,3.322,201,2.768]],["title/entities/AuthPass.html",[32,1.375,146,1.827]],["body/entities/AuthPass.html",[7,0.033,13,0.375,14,0.375,15,0.329,18,0.57,32,1.901,46,0.691,54,3.058,58,2.087,64,0.375,65,0.017,66,0.023,67,0.023,74,0.375,76,1.186,81,1.499,84,0.952,89,1.135,96,1.4,128,1.292,146,2.526,148,1.468,157,2.151,166,4.427,167,4.137,172,4.137,177,4.137,179,4.137,183,1.874,192,3.556,202,2.713,203,4.966,204,4.966,205,3.256,206,3.256,207,3.256,208,3.256,209,3.174,210,4.39,211,4.39,212,3.256,213,4.39,214,2.081,215,3.256,216,3.256,217,3.256]],["title/injectables/AuthService.html",[120,1.505,218,1.26]],["body/injectables/AuthService.html",[7,0.034,13,0.206,14,0.206,15,0.18,18,0.669,21,0.462,30,0.931,35,1.828,36,1.292,41,2.015,46,0.517,52,1.028,54,2.29,64,0.206,65,0.009,66,0.015,67,0.015,74,0.206,75,1.121,76,1.875,77,3.315,79,3.315,80,2.353,84,0.776,86,1.985,87,2.184,89,0.906,93,1.449,94,1.331,95,1.029,96,1.299,98,2.651,107,2.918,108,1.292,109,1.877,112,2.353,118,1.489,120,1.339,125,1.339,128,1.72,129,1.625,130,1.66,131,1.489,133,1.489,138,1.915,151,2.29,183,1.028,195,1.292,197,2.353,209,2.043,214,1.887,218,1.121,219,1.028,220,1.489,221,2.825,222,1.625,223,1.489,224,3.315,225,4.825,226,1.787,227,2.353,228,2.825,229,1.787,230,2.353,231,2.825,232,1.787,233,2.353,234,2.825,235,2.825,236,2.825,237,1.787,238,2.043,239,3.98,240,2.825,241,1.787,242,2.825,243,2.825,244,1.787,245,1.787,246,2.825,247,2.353,248,1.489,249,1.787,250,1.489,251,2.043,252,2.245,253,1.787,254,1.787,255,2.533,256,1.824,257,2.825,258,1.787,259,1.787,260,2.825,261,2.825,262,2.533,263,1.787,264,1.787,265,1.489,266,2.353,267,2.353,268,1.787,269,2.825,270,1.787,271,2.353,272,1.787,273,2.825,274,1.787,275,2.353,276,2.353,277,1.787,278,2.825,279,1.787]],["title/classes/CreateDto.html",[65,0.016,280,1.654]],["body/classes/CreateDto.html",[7,0.033,13,0.407,14,0.407,15,0.357,18,0.603,46,0.672,64,0.534,65,0.027,66,0.024,67,0.024,74,0.407,81,1.308,84,0.927,89,1.421,95,1.2,96,0.998,117,1.288,148,1.551,157,2.535,280,2.416,281,1.532,282,2.558,283,3.972,284,3.972,285,3.972,286,3.864,287,3.538,288,3.538,289,3.538,290,2.947,291,3.655,292,1.843,293,3.281,294,1.677]],["title/injectables/JwtStrategy.html",[188,1.827,218,1.26]],["body/injectables/JwtStrategy.html",[7,0.033,13,0.371,14,0.371,15,0.325,18,0.719,21,0.834,46,0.567,52,1.855,64,0.371,65,0.017,66,0.022,67,0.022,74,0.371,75,1.73,76,1.799,84,0.781,86,1.28,87,2.067,93,1.588,94,1.458,95,1.128,120,2.702,121,2.332,124,1.679,125,1.529,128,1.28,129,2.843,130,1.529,138,1.28,188,2.509,190,3.632,191,2.686,201,2.686,214,1.529,218,1.73,219,1.855,222,1.855,247,3.632,265,2.686,271,3.632,295,2.686,296,3.224,297,3.224,298,4.36,299,3.224,300,2.332,301,3.224,302,3.224,303,2.686,304,2.686,305,3.224,306,2.686,307,3.224,308,3.224,309,3.224,310,3.224,311,3.224,312,3.224,313,3.224,314,3.224,315,3.224]],["title/classes/LoginDto.html",[65,0.016,98,1.827]],["body/classes/LoginDto.html",[7,0.033,13,0.449,14,0.449,15,0.394,18,0.642,46,0.642,54,3.12,64,0.449,65,0.025,66,0.025,67,0.025,74,0.449,81,1.394,84,0.885,98,2.844,117,1.421,148,1.653,151,3.12,157,2.469,281,1.691,291,3.168,292,2.033,293,3.12,316,3.252,317,3.252,318,3.903,319,3.903,320,3.903,321,4.117,322,3.252,323,3.252]],["title/classes/Product.html",[65,0.016,324,1.505]],["body/classes/Product.html",[7,0.033,13,0.365,14,0.365,15,0.32,18,0.412,28,1.825,41,3.398,46,0.754,64,0.564,65,0.016,66,0.022,67,0.022,74,0.365,81,1.483,84,0.941,89,1.467,95,1.36,96,1.382,128,1.259,148,1.442,157,2.277,184,4.38,281,1.374,283,3.543,284,3.543,285,3.543,324,2.323,325,2.033,326,4.312,327,3.172,328,3.172,329,4.312,330,3.172,331,5.672,332,3.172,333,3.172,334,3.593,335,3.172,336,2.294,337,3.172,338,4.312,339,2.643,340,2.033,341,2.643]],["title/controllers/ProductController.html",[68,1.062,342,2.035]],["body/controllers/ProductController.html",[7,0.033,13,0.271,14,0.271,15,0.238,18,0.638,21,0.61,46,0.598,64,0.271,65,0.012,66,0.018,67,0.018,68,0.788,70,0.936,72,1.357,74,0.271,75,1.386,76,2.123,81,1.385,84,0.879,86,1.949,89,1.444,93,1.675,94,1.538,95,1.19,96,1.45,111,2.239,113,3.008,116,1.511,117,0.858,124,1.228,128,1.651,130,1.118,138,1.949,214,1.656,252,1.511,256,2.395,280,2.557,294,2.18,324,2.591,342,2.239,343,1.964,344,1.964,345,2.525,346,3.326,347,2.909,348,3.492,349,3.492,350,1.705,351,2.358,352,3.326,353,2.358,354,1.964,355,2.909,356,2.358,357,2.358,358,3.492,359,2.358,360,2.358,361,3.492,362,2.358,363,1.964,364,1.705,365,1.511,366,1.705,367,1.972,368,1.705,369,2.358,370,2.358,371,1.964,372,2.358,373,1.964,374,1.964,375,1.964,376,1.964,377,1.964,378,1.964,379,1.964,380,1.964,381,1.964,382,2.358,383,2.358,384,2.358,385,2.358,386,1.964]],["title/controllers/ProductMicroController.html",[68,1.062,387,2.035]],["body/controllers/ProductMicroController.html",[7,0.033,13,0.253,14,0.253,15,0.222,18,0.62,19,1.832,21,0.569,46,0.577,64,0.253,65,0.011,66,0.017,67,0.017,68,0.735,70,0.873,72,1.266,74,0.253,75,1.316,76,1.995,81,1.344,84,0.854,86,1.892,89,1.296,93,1.618,94,1.832,95,1.149,96,0.935,111,1.41,113,2.398,114,3.624,115,1.41,124,1.145,128,1.763,130,1.572,138,1.892,214,1.572,256,2.314,280,2.483,294,2.106,300,1.59,324,2.106,345,2.398,346,3.213,350,1.59,352,2.886,355,1.832,363,1.832,364,2.398,365,2.125,366,1.59,367,1.892,368,1.59,371,1.832,373,1.832,374,1.832,375,1.832,376,1.832,377,1.832,378,1.832,379,1.832,380,1.832,381,1.832,386,1.832,387,2.125,388,4.175,389,1.59,390,2.199,391,3.315,392,3.315,393,3.315,394,2.199,395,3.315,396,2.199,397,2.199,398,3.315,399,2.199,400,3.315,401,2.199,402,3.315,403,2.199,404,3.315,405,2.199,406,3.315,407,2.199,408,3.315,409,3.991,410,2.199,411,3.315,412,2.199,413,2.199,414,2.199,415,2.199,416,2.199,417,2.199,418,2.199,419,2.199,420,2.199,421,2.199,422,2.199]],["title/modules/ProductModule.html",[0,1.375,8,1.827]],["body/modules/ProductModule.html",[0,2.024,2,1.695,3,2.215,7,0.033,8,3.377,10,2.688,11,2.058,12,2.058,13,0.412,14,0.412,15,0.361,17,2.292,18,0.763,21,0.925,27,2.979,28,2.058,61,2.994,64,0.412,65,0.018,66,0.024,67,0.024,70,1.854,94,1.196,324,2.215,334,2.979,340,2.994,342,3.335,367,2.783,368,2.586,387,3.335,423,2.979,424,2.979,425,3.576,426,2.979,427,2.979,428,3.576,429,3.576,430,3.576]],["title/injectables/ProductService.html",[218,1.26,367,1.505]],["body/injectables/ProductService.html",[7,0.034,13,0.171,14,0.171,15,0.15,18,0.55,21,0.383,28,0.853,46,0.55,60,1.235,64,0.171,65,0.008,66,0.013,67,0.013,74,0.171,75,0.964,76,2.049,84,0.801,86,2.063,87,2.357,89,1.345,93,1.542,94,1.416,95,1.095,96,1.571,125,1.152,128,1.852,130,1.868,138,1.852,214,2.414,218,0.964,219,0.853,222,1.398,230,2.024,233,2.024,251,1.757,252,2.714,256,2.431,294,1.693,324,2.822,336,1.072,344,2.024,345,1.757,346,3.375,347,2.024,350,1.757,352,1.072,354,2.024,364,2.582,366,1.072,367,1.152,426,1.235,431,1.235,432,2.43,433,3.571,434,1.482,435,3.283,436,3.088,437,3.571,438,1.482,439,2.43,440,1.482,441,2.43,442,2.43,443,1.482,444,2.43,445,1.482,446,1.482,447,1.482,448,2.43,449,1.482,450,1.235,451,1.235,452,1.482,453,1.482,454,1.482,455,1.482,456,1.482,457,1.482,458,1.482,459,4.234,460,2.43,461,2.43,462,1.482,463,2.43,464,2.43,465,3.571,466,3.088,467,3.088,468,3.571,469,3.088,470,1.482,471,2.43,472,3.088,473,1.482,474,3.088,475,3.571,476,3.571,477,3.571,478,3.571,479,1.482,480,1.482,481,1.482,482,1.482,483,2.43,484,2.43,485,2.43,486,1.482,487,1.482]],["title/classes/RegisterDto.html",[65,0.016,103,2.035]],["body/classes/RegisterDto.html",[7,0.033,13,0.371,14,0.371,15,0.325,18,0.567,46,0.642,52,3.182,54,3.182,64,0.371,65,0.022,66,0.022,67,0.022,74,0.371,81,1.393,84,0.885,103,2.795,117,1.174,148,1.458,151,2.843,157,2.469,281,1.397,291,3.167,292,1.679,293,3.046,317,2.686,321,3.632,322,2.686,323,3.632,488,2.686,489,3.224,490,3.224,491,5.293,492,4.409,493,4.36,494,4.36,495,4.36,496,4.36,497,4.36,498,3.224,499,3.224,500,4.36,501,4.36,502,3.224,503,2.686,504,3.224,505,4.36,506,3.224,507,3.224]],["title/classes/ResponseModel.html",[65,0.016,109,1.375]],["body/classes/ResponseModel.html",[7,0.033,13,0.421,14,0.421,15,0.369,46,0.723,64,0.421,65,0.019,66,0.024,67,0.024,74,0.421,84,0.996,89,1.491,93,1.331,94,1.223,95,0.946,109,2.053,148,1.585,222,2.104,255,4.167,256,3.13,262,4.346,281,1.584,508,3.046,509,4.739,510,5.763,511,4.739,512,3.656,513,3.656,514,3.656,515,3.656,516,3.656]],["title/classes/UpdateDto.html",[65,0.016,294,1.505]],["body/classes/UpdateDto.html",[7,0.033,13,0.394,14,0.394,15,0.346,18,0.59,46,0.705,64,0.523,65,0.026,66,0.023,67,0.023,74,0.394,81,1.281,84,0.971,89,1.46,95,1.403,96,1.437,117,1.248,148,1.519,157,2.512,280,1.785,281,1.484,282,2.478,283,3.922,284,3.922,285,3.922,286,3.784,290,2.855,291,3.618,292,1.785,293,3.248,294,2.153,517,3.427,518,3.427,519,3.427,520,3.427]],["title/classes/UpdateProfileDto.html",[65,0.016,521,1.827]],["body/classes/UpdateProfileDto.html",[7,0.033,13,0.362,14,0.362,15,0.317,18,0.557,46,0.68,64,0.362,65,0.022,66,0.022,67,0.022,74,0.362,81,1.477,84,0.938,95,1.524,117,1.144,148,1.433,149,3.525,152,3.525,153,3.525,154,3.525,157,2.552,281,1.361,292,1.636,293,3.39,492,3.569,503,2.617,521,2.465,522,3.513,523,2.617,524,3.142,525,3.142,526,3.142,527,3.142,528,4.284,529,4.284,530,4.284,531,4.362,532,4.284,533,4.284,534,4.284,535,4.284,536,3.569,537,4.284,538,3.142,539,3.142]],["title/controllers/UserController.html",[68,1.062,540,2.035]],["body/controllers/UserController.html",[7,0.033,13,0.354,14,0.354,15,0.31,18,0.707,21,0.795,46,0.548,64,0.354,65,0.016,66,0.022,67,0.022,68,1.028,70,1.219,72,1.768,74,0.354,75,1.675,76,2.046,81,1.19,84,0.756,86,1.675,87,2.46,89,1.453,93,1.537,94,1.411,95,1.092,96,1.463,109,1.331,110,1.97,111,2.705,116,1.97,117,1.119,124,1.601,125,1.457,129,1.768,138,1.675,252,1.97,365,1.97,521,3.372,522,1.97,540,2.705,541,2.56,542,3.051,543,3.485,544,2.222,545,4.22,546,3.073,547,2.56,548,4.22,549,3.073,550,2.56,551,2.285,552,2.222,553,2.56,554,3.073,555,3.073,556,2.56,557,3.073,558,3.073]],["title/controllers/UserMicroController.html",[68,1.062,559,2.035]],["body/controllers/UserMicroController.html",[7,0.033,13,0.359,14,0.359,15,0.315,18,0.711,21,0.807,46,0.554,64,0.359,65,0.016,66,0.022,67,0.022,68,1.044,70,1.239,72,1.796,74,0.359,75,1.693,76,2.055,81,1.203,84,0.764,86,1.693,87,2.476,89,1.257,90,2.601,93,1.553,94,1.746,95,1.103,96,0.88,109,1.352,110,2.001,114,3.514,115,2.001,116,2.001,117,1.137,124,1.626,125,1.48,138,1.693,300,2.257,365,2.001,389,2.257,542,3.085,543,3.085,544,3.085,551,2.304,552,2.257,553,2.601,556,2.601,559,2.734,560,4.048,561,3.122,562,4.266,563,3.122,564,4.266,565,3.122,566,4.266,567,3.122,568,3.122,569,3.122,570,3.122,571,3.122]],["title/modules/UserModule.html",[0,1.375,9,1.827]],["body/modules/UserModule.html",[0,2.028,2,1.702,3,2.22,7,0.033,9,3.381,10,2.694,11,2.065,12,2.065,13,0.413,14,0.413,15,0.362,17,2.301,18,0.778,21,0.928,29,2.596,30,1.87,32,2.028,34,2.065,35,1.424,61,3.001,64,0.413,65,0.018,66,0.024,67,0.024,70,1.858,129,2.065,192,2.301,193,2.596,198,2.99,427,2.99,540,3.341,551,2.785,552,2.596,559,3.341,572,2.99,573,2.99,574,3.589,575,3.589]],["title/injectables/UserService.html",[218,1.26,551,1.505]],["body/injectables/UserService.html",[7,0.034,13,0.273,14,0.273,15,0.24,18,0.67,21,0.614,30,1.237,35,0.942,41,2.656,46,0.543,64,0.273,65,0.012,66,0.018,67,0.018,74,0.273,75,1.393,76,1.877,84,0.748,86,1.393,87,2.188,89,1.334,93,1.521,94,1.397,95,1.081,96,1.544,109,1.029,110,1.522,125,1.126,128,1.832,138,1.832,149,1.717,152,1.717,153,1.717,154,1.717,155,1.978,183,1.366,193,1.717,214,1.98,218,1.393,219,1.366,222,2.02,223,1.978,224,3.845,227,2.925,248,1.978,250,1.978,251,1.717,255,3.337,256,2.404,262,3.337,266,3.845,267,2.925,275,1.978,276,2.925,521,3.069,522,1.522,542,2.539,543,3.561,544,2.539,547,1.978,550,1.978,551,1.665,576,1.978,577,2.375,578,2.375,579,2.375,580,3.511,581,3.511,582,3.511,583,3.511,584,3.511,585,3.511,586,3.511,587,2.375,588,2.375,589,2.375,590,2.375,591,2.375,592,2.375]],["title/coverage.html",[593,3.12]],["body/coverage.html",[7,0.033,15,0.302,32,1.295,35,1.186,46,0.388,65,0.029,66,0.021,67,0.021,68,1.8,69,1.916,71,2.49,98,1.72,103,1.916,109,1.295,120,1.417,130,1.417,146,2.382,147,2.49,188,1.72,192,1.916,202,2.49,218,2.035,220,2.49,280,1.557,282,2.994,294,1.417,295,2.49,316,2.49,324,1.417,325,2.654,340,1.916,342,1.916,343,2.49,367,1.417,387,1.916,388,2.49,389,2.994,431,2.49,488,2.49,508,2.49,521,1.72,522,1.916,523,2.49,531,5.244,540,1.916,541,2.49,551,1.417,559,1.916,560,2.49,576,2.49,593,2.161,594,2.989,595,2.989,596,2.989,597,5.384,598,2.989,599,2.989,600,5.127,601,4.749,602,5.127,603,2.49,604,2.989,605,2.49,606,4.14,607,2.989,608,2.989,609,2.989,610,2.989,611,2.989]],["title/dependencies.html",[3,1.808,612,2.216]],["body/dependencies.html",[3,1.549,7,0.034,21,0.845,24,2.722,26,2.722,28,1.88,30,1.702,65,0.023,66,0.023,67,0.023,108,2.363,115,2.094,117,1.19,183,1.88,195,2.363,209,2.363,292,1.702,303,4.144,304,2.722,306,2.722,435,3.665,450,4.433,451,2.722,613,5.554,614,3.267,615,3.267,616,3.267,617,3.267,618,3.267,619,3.267,620,3.267,621,3.267,622,3.267,623,3.267,624,3.267,625,3.267,626,3.267,627,3.267,628,3.267,629,3.267,630,3.267,631,3.267,632,3.267,633,3.267,634,3.267,635,3.267,636,3.267,637,3.267,638,3.267,639,3.267,640,3.267,641,3.267,642,3.267,643,3.267,644,3.267,645,3.267,646,3.267,647,3.267,648,3.267,649,3.267,650,3.267,651,3.267,652,3.267,653,3.267,654,3.267,655,3.267]],["title/miscellaneous/functions.html",[656,1.386,657,3.177]],["body/miscellaneous/functions.html",[7,0.029,66,0.029,67,0.029,74,0.555,603,4.018,605,4.955,656,2.512,657,4.018,658,4.823]],["title/index.html",[74,0.306,659,2.66,660,2.66]],["body/index.html",[7,0.033,66,0.025,67,0.025,151,2.237,238,2.811,536,3.239,593,2.811,661,3.888,662,3.239,663,3.239,664,3.888,665,3.888,666,3.888,667,6.095,668,3.888,669,3.888,670,3.888,671,6.001,672,3.888,673,4.929,674,3.888,675,3.888,676,3.888,677,3.888,678,4.929,679,4.929,680,3.888,681,3.888,682,3.888,683,3.239,684,3.239,685,3.239,686,3.888]],["title/modules.html",[2,2.046]],["body/modules.html",[1,2.906,2,2.149,6,2.609,7,0.028,8,2.609,9,2.609,66,0.028,67,0.028,687,6.004,688,6.004,689,6.004,690,6.004]],["title/overview.html",[691,3.595]],["body/overview.html",[1,3.917,2,1.76,3,2.269,4,3.092,5,3.092,6,3.471,7,0.032,8,3.332,9,3.332,10,2.753,11,2.136,12,2.136,58,2.379,66,0.025,67,0.025,70,1.473,120,2.511,186,3.092,187,3.092,188,3.047,219,2.136,281,1.608,367,2.511,423,3.092,424,3.092,551,2.511,572,3.092,573,3.092,691,3.092,692,4.785,693,3.711,694,3.711,695,3.711]],["title/properties.html",[148,1.275,612,2.216]],["body/properties.html",[7,0.032,66,0.028,67,0.028,148,1.552,238,3.356,662,3.866,663,3.866,683,3.866,684,3.866,685,3.866,696,4.641,697,4.641,698,4.641,699,4.641,700,4.641]],["title/miscellaneous/typealiases.html",[656,1.386,701,3.814]],["body/miscellaneous/typealiases.html",[7,0.029,46,0.627,66,0.029,67,0.029,74,0.555,325,3.092,336,4.064,656,2.512,702,4.823,703,4.018]],["title/miscellaneous/variables.html",[656,1.386,704,3.177]],["body/miscellaneous/variables.html",[7,0.03,66,0.029,67,0.029,74,0.547,325,3.047,339,3.96,340,3.572,341,3.96,656,2.476,703,3.96,704,3.96,705,4.753]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":531,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":697,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["0.10.3",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":606,"title":{},"body":{"coverage.html":{}}}],["09",{"_index":537,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["1.0.0",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":534,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["1h",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":694,"title":{},"body":{"overview.html":{}}}],["2.2.0",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["201",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["3.0.1",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":458,"title":{},"body":{"injectables/ProductService.html":{}}}],["4",{"_index":692,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["4.1.7",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":581,"title":{},"body":{"injectables/UserService.html":{}}}],["5",{"_index":693,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["5.2.4",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":464,"title":{},"body":{"injectables/ProductService.html":{}}}],["6.1.2",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["6.6.5",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":608,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":695,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":607,"title":{},"body":{"coverage.html":{}}}],["8.8.0",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":530,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["9.0.0",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["9.1.4",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["9]{3",{"_index":532,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["9]{4",{"_index":533,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["9]|2[1",{"_index":529,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["9]|3[1",{"_index":528,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["addproduct",{"_index":345,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{}}}],["addproduct(@body",{"_index":374,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["addproduct(product",{"_index":350,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{}}}],["address",{"_index":149,"title":{},"body":{"entities/AuthEntity.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserService.html":{}}}],["aliases",{"_index":702,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all_product",{"_index":398,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["amqp",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["amqplib",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":663,"title":{},"body":{"index.html":{},"properties.html":{}}}],["apiproperty",{"_index":293,"title":{},"body":{"classes/CreateDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{}}}],["apiproperty()@isemail",{"_index":317,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["apiproperty()@isstring()@maxlength(20",{"_index":319,"title":{},"body":{"classes/LoginDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@maxlength(20)@matches(/(?=.*[a",{"_index":490,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@maxlength(20)@matches(/^[a",{"_index":499,"title":{},"body":{"classes/RegisterDto.html":{}}}],["apiproperty()@matches(/09(1[0",{"_index":527,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["apitags",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{}}}],["apitags('auth",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('products",{"_index":369,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('user",{"_index":553,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserMicroController.html":{}}}],["app",{"_index":669,"title":{},"body":{"index.html":{}}}],["app_interceptor",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["atleast",{"_index":494,"title":{},"body":{"classes/RegisterDto.html":{}}}],["auth",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{}}}],["auth.controller",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_login",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth_register",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":69,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentity",{"_index":35,"title":{"entities/AuthEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":683,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authpass",{"_index":32,"title":{"entities/AuthPass.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["authpass.id",{"_index":161,"title":{},"body":{"entities/AuthEntity.html":{}}}],["authpass.password",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["authrepository",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["authservice",{"_index":120,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":214,"title":{},"body":{"entities/AuthPass.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["bcrypt",{"_index":209,"title":{},"body":{"entities/AuthPass.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(logindto.password",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":215,"title":{},"body":{"entities/AuthPass.html":{}}}],["bcrypt.hash(this.password",{"_index":217,"title":{},"body":{"entities/AuthPass.html":{}}}],["beforeinsert",{"_index":210,"title":{},"body":{"entities/AuthPass.html":{}}}],["beforeupdate",{"_index":211,"title":{},"body":{"entities/AuthPass.html":{}}}],["body",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":510,"title":{},"body":{"classes/ResponseModel.html":{}}}],["bootstrap",{"_index":605,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":690,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":687,"title":{},"body":{"modules.html":{}}}],["cache",{"_index":435,"title":{},"body":{"injectables/ProductService.html":{},"dependencies.html":{}}}],["cacheditem",{"_index":459,"title":{},"body":{"injectables/ProductService.html":{}}}],["cacheinterceptor",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/ProductMicroController.html":{}}}],["cachekey",{"_index":413,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["cachekey('cache_getall",{"_index":417,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["cachekey('cache_getall')@get()@messagepattern({name",{"_index":397,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["cachemanager",{"_index":439,"title":{},"body":{"injectables/ProductService.html":{}}}],["cachemodule",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["capital",{"_index":496,"title":{},"body":{"classes/RegisterDto.html":{}}}],["cascade",{"_index":163,"title":{},"body":{"entities/AuthEntity.html":{}}}],["catch",{"_index":472,"title":{},"body":{"injectables/ProductService.html":{}}}],["catcherror",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["catcherror((err",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["characters",{"_index":535,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["class",{"_index":65,"title":{"classes/CreateDto.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":281,"title":{},"body":{"classes/CreateDto.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":423,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_providers",{"_index":424,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":572,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":573,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResponseModel.html":{},"injectables/UserService.html":{}}}],["column",{"_index":179,"title":{},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{}}}],["column({nullable",{"_index":158,"title":{},"body":{"entities/AuthEntity.html":{}}}],["column({unique",{"_index":169,"title":{},"body":{"entities/AuthEntity.html":{}}}],["config",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["connection",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["console.log(err.message",{"_index":479,"title":{},"body":{"injectables/ProductService.html":{}}}],["console.log(error.message",{"_index":484,"title":{},"body":{"injectables/ProductService.html":{}}}],["console.log(id",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductService.html":{},"classes/ResponseModel.html":{},"injectables/UserService.html":{}}}],["constructor(authrepository",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(cachemanager",{"_index":434,"title":{},"body":{"injectables/ProductService.html":{}}}],["constructor(private",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{}}}],["constructor(success",{"_index":509,"title":{},"body":{"classes/ResponseModel.html":{}}}],["contain",{"_index":493,"title":{},"body":{"classes/RegisterDto.html":{}}}],["controller",{"_index":68,"title":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('microservice/product",{"_index":415,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["controller('microservice/user",{"_index":568,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["controller('products",{"_index":370,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('user",{"_index":554,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":593,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created_at",{"_index":203,"title":{},"body":{"entities/AuthPass.html":{}}}],["created_time",{"_index":150,"title":{},"body":{"entities/AuthEntity.html":{}}}],["createdatecolumn",{"_index":167,"title":{},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{}}}],["createdto",{"_index":280,"title":{"classes/CreateDto.html":{}},"body":{"classes/CreateDto.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["createdto.image",{"_index":377,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["createdto.likes",{"_index":379,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["createdto.title",{"_index":375,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["database",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":166,"title":{},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{}}}],["decorators",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"classes/CreateDto.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{}}}],["default",{"_index":339,"title":{},"body":{"classes/Product.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":364,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{}}}],["delete(':id",{"_index":358,"title":{},"body":{"controllers/ProductController.html":{}}}],["delete()@messagepattern({name",{"_index":405,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["delete(id",{"_index":442,"title":{},"body":{"injectables/ProductService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":670,"title":{},"body":{"index.html":{}}}],["digits",{"_index":501,"title":{},"body":{"classes/RegisterDto.html":{}}}],["document",{"_index":337,"title":{},"body":{"classes/Product.html":{}}}],["documentation",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["dtos/login.dto",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/product.dto",{"_index":366,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{}}}],["dtos/register.dto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["e2e",{"_index":680,"title":{},"body":{"index.html":{}}}],["eager",{"_index":162,"title":{},"body":{"entities/AuthEntity.html":{}}}],["email",{"_index":151,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"index.html":{}}}],["entities",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"overview.html":{}}}],["entities/auth",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["entities/auth.entity",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["entity",{"_index":146,"title":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{}},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"coverage.html":{}}}],["err",{"_index":473,"title":{},"body":{"injectables/ProductService.html":{}}}],["error",{"_index":483,"title":{},"body":{"injectables/ProductService.html":{}}}],["expiresin",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["express",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["file",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["find",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{}}}],["find_by_id",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["findbyid",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyid(id",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["findone",{"_index":432,"title":{},"body":{"injectables/ProductService.html":{}}}],["findone(id",{"_index":444,"title":{},"body":{"injectables/ProductService.html":{}}}],["findproduct",{"_index":485,"title":{},"body":{"injectables/ProductService.html":{}}}],["finduser",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["finduser.address",{"_index":586,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser.authpass.password",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser.first_name",{"_index":583,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser.id",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["finduser.last_name",{"_index":584,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser.phone_number",{"_index":585,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser.profile_image",{"_index":587,"title":{},"body":{"injectables/UserService.html":{}}}],["first_name",{"_index":152,"title":{},"body":{"entities/AuthEntity.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserService.html":{}}}],["found",{"_index":580,"title":{},"body":{"injectables/UserService.html":{}}}],["founduser",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":665,"title":{},"body":{"index.html":{}}}],["from(this.authrepository.save(authentity)).pipe",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":604,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":657,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":355,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["get(':id')@messagepattern({name",{"_index":401,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["get('profile:id",{"_index":545,"title":{},"body":{"controllers/UserController.html":{}}}],["get('users",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('users')@messagepattern({name",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@messagepattern({name",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserMicroController.html":{}}}],["get_all_users",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["get_product",{"_index":402,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["get_user_profile",{"_index":562,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["getall",{"_index":346,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{}}}],["getallusers",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getone",{"_index":347,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["getone(@param('id",{"_index":372,"title":{},"body":{"controllers/ProductController.html":{}}}],["getone(id",{"_index":354,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["getoneproduct",{"_index":391,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["getoneproduct(id",{"_index":400,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["gets",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{}}}],["getting",{"_index":659,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserbyid(id",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserprofile",{"_index":542,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["getuserprofile(@param('id",{"_index":555,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserprofile(id",{"_index":544,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["hashedpassword",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(password",{"_index":212,"title":{},"body":{"entities/AuthPass.html":{}}}],["host",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":452,"title":{},"body":{"injectables/ProductService.html":{}}}],["httpexception('something",{"_index":475,"title":{},"body":{"injectables/ProductService.html":{}}}],["httpstatus",{"_index":453,"title":{},"body":{"injectables/ProductService.html":{}}}],["httpstatus.conflict",{"_index":478,"title":{},"body":{"injectables/ProductService.html":{}}}],["id",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/UpdateDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":283,"title":{},"body":{"classes/CreateDto.html":{},"classes/Product.html":{},"classes/UpdateDto.html":{}}}],["import",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":74,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/ProductService.html":{}}}],["inject('cache_manager",{"_index":455,"title":{},"body":{"injectables/ProductService.html":{}}}],["injectable",{"_index":218,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":454,"title":{},"body":{"injectables/ProductService.html":{}}}],["injectmodel(product.name",{"_index":456,"title":{},"body":{"injectables/ProductService.html":{}}}],["injectrepository",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectrepository(authentity",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":666,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":668,"title":{},"body":{"index.html":{}}}],["interface/response.model",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["ioredis",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["isemail",{"_index":321,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isglobal",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":290,"title":{},"body":{"classes/CreateDto.html":{},"classes/UpdateDto.html":{}}}],["isstring",{"_index":291,"title":{},"body":{"classes/CreateDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{}}}],["isstring()@apiproperty",{"_index":286,"title":{},"body":{"classes/CreateDto.html":{},"classes/UpdateDto.html":{}}}],["joincolumn",{"_index":181,"title":{},"body":{"entities/AuthEntity.html":{}}}],["jwt",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["jwtfromrequest",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":188,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["last_name",{"_index":153,"title":{},"body":{"entities/AuthEntity.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserService.html":{}}}],["letter",{"_index":497,"title":{},"body":{"classes/RegisterDto.html":{}}}],["license",{"_index":699,"title":{},"body":{"properties.html":{}}}],["likes",{"_index":284,"title":{},"body":{"classes/CreateDto.html":{},"classes/Product.html":{},"classes/UpdateDto.html":{}}}],["local",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["login",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(login",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto",{"_index":98,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["manager",{"_index":450,"title":{},"body":{"injectables/ProductService.html":{},"dependencies.html":{}}}],["map",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["map((user",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":503,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["matches(/(?=.*[a",{"_index":507,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matches(/09(1[0",{"_index":539,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["matches(/^[a",{"_index":506,"title":{},"body":{"classes/RegisterDto.html":{}}}],["matching",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":322,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["maxlength(20",{"_index":323,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["mehran",{"_index":684,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mehranfmpx@gmail.com",{"_index":686,"title":{},"body":{"index.html":{}}}],["message",{"_index":492,"title":{},"body":{"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["messagepattern",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductMicroController.html":{},"controllers/UserMicroController.html":{}}}],["metadata",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["microservice",{"_index":698,"title":{},"body":{"properties.html":{}}}],["microservice.controller",{"_index":427,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["microservice.controller.ts",{"_index":389,"title":{},"body":{"controllers/ProductMicroController.html":{},"controllers/UserMicroController.html":{},"coverage.html":{}}}],["microservice.controller.ts:14",{"_index":563,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["microservice.controller.ts:20",{"_index":567,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["microservice.controller.ts:25",{"_index":399,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["microservice.controller.ts:31",{"_index":403,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["microservice.controller.ts:37",{"_index":396,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["microservice.controller.ts:49",{"_index":412,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["microservice.controller.ts:58",{"_index":407,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["microservice/product",{"_index":390,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["microservice/user",{"_index":561,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["microshop",{"_index":661,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":504,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(4",{"_index":505,"title":{},"body":{"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":656,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":673,"title":{},"body":{"index.html":{}}}],["model",{"_index":437,"title":{},"body":{"injectables/ProductService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":451,"title":{},"body":{"injectables/ProductService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{}}}],["mongoosemodule.forfeature",{"_index":429,"title":{},"body":{"modules/ProductModule.html":{}}}],["mongoosemodule.forroot(process.env.db_mongo",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/ResponseModel.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":664,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductMicroController.html":{},"controllers/UserMicroController.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateDto.html":{},"classes/LoginDto.html":{},"controllers/ProductController.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["notfoundexception",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["npm",{"_index":667,"title":{},"body":{"index.html":{}}}],["null",{"_index":486,"title":{},"body":{"injectables/ProductService.html":{}}}],["nullable",{"_index":185,"title":{},"body":{"entities/AuthEntity.html":{}}}],["number",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["object",{"_index":409,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["observable",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["one",{"_index":495,"title":{},"body":{"classes/RegisterDto.html":{}}}],["onetoone",{"_index":182,"title":{},"body":{"entities/AuthEntity.html":{}}}],["onetoone(undefined",{"_index":160,"title":{},"body":{"entities/AuthEntity.html":{}}}],["optional",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":691,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":612,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":557,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/ResponseModel.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["pass.entity",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["pass.entity.ts",{"_index":202,"title":{},"body":{"entities/AuthPass.html":{},"coverage.html":{}}}],["pass.entity.ts:10",{"_index":206,"title":{},"body":{"entities/AuthPass.html":{}}}],["pass.entity.ts:13",{"_index":207,"title":{},"body":{"entities/AuthPass.html":{}}}],["pass.entity.ts:16",{"_index":205,"title":{},"body":{"entities/AuthPass.html":{}}}],["pass.entity.ts:19",{"_index":208,"title":{},"body":{"entities/AuthPass.html":{}}}],["passport",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["payload",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/ProductMicroController.html":{},"controllers/UserMicroController.html":{}}}],["payload.updateprofiledto",{"_index":571,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["payload['image",{"_index":419,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["payload['title",{"_index":421,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["pg",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["phone_number",{"_index":154,"title":{},"body":{"entities/AuthEntity.html":{},"classes/UpdateProfileDto.html":{},"injectables/UserService.html":{}}}],["placeholder",{"_index":329,"title":{},"body":{"classes/Product.html":{}}}],["port",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["post('login",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@messagepattern({name",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@messagepattern({name",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@messagepattern({name",{"_index":394,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["postgres",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{}}}],["primarygeneratedcolumn",{"_index":172,"title":{},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{}}}],["private",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["process.env.jwt_secret",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["product",{"_index":324,"title":{"classes/Product.html":{}},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["product.controller",{"_index":428,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.id",{"_index":384,"title":{},"body":{"controllers/ProductController.html":{}}}],["product.image",{"_index":378,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["product.likes",{"_index":380,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["product.name",{"_index":430,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.service",{"_index":368,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{}}}],["product.title",{"_index":376,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["product/product.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["product_created",{"_index":395,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["product_deleted",{"_index":406,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["product_updated",{"_index":411,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["productcontroller",{"_index":342,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productdeleted",{"_index":348,"title":{},"body":{"controllers/ProductController.html":{}}}],["productdeleted(@param('id",{"_index":385,"title":{},"body":{"controllers/ProductController.html":{}}}],["productdeleted(id",{"_index":357,"title":{},"body":{"controllers/ProductController.html":{}}}],["productdeleteredis",{"_index":392,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["productdeleteredis(id",{"_index":404,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["productdocument",{"_index":336,"title":{},"body":{"classes/Product.html":{},"injectables/ProductService.html":{},"miscellaneous/typealiases.html":{}}}],["production",{"_index":675,"title":{},"body":{"index.html":{}}}],["productmicrocontroller",{"_index":387,"title":{"controllers/ProductMicroController.html":{}},"body":{"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productmodel",{"_index":436,"title":{},"body":{"injectables/ProductService.html":{}}}],["productmodule",{"_index":8,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["products",{"_index":344,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["productschema",{"_index":340,"title":{},"body":{"classes/Product.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productservice",{"_index":367,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productupdated",{"_index":349,"title":{},"body":{"controllers/ProductController.html":{}}}],["productupdated(@param('id",{"_index":382,"title":{},"body":{"controllers/ProductController.html":{}}}],["productupdated(id",{"_index":360,"title":{},"body":{"controllers/ProductController.html":{}}}],["productupdatedredis",{"_index":393,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["productupdatedredis(payload",{"_index":408,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["profile",{"_index":582,"title":{},"body":{"injectables/UserService.html":{}}}],["profile.dto",{"_index":550,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profile.dto.ts",{"_index":523,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:15",{"_index":538,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts:18",{"_index":524,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts:6",{"_index":525,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts:9",{"_index":526,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["profile_image",{"_index":155,"title":{},"body":{"entities/AuthEntity.html":{},"injectables/UserService.html":{}}}],["promise",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["promise(async",{"_index":466,"title":{},"body":{"injectables/ProductService.html":{}}}],["prop",{"_index":331,"title":{},"body":{"classes/Product.html":{}}}],["prop({default",{"_index":328,"title":{},"body":{"classes/Product.html":{}}}],["prop({required",{"_index":326,"title":{},"body":{"classes/Product.html":{}}}],["properties",{"_index":148,"title":{"properties.html":{}},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"classes/CreateDto.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"properties.html":{}}}],["provide",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["put",{"_index":365,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{}}}],["put(':id",{"_index":361,"title":{},"body":{"controllers/ProductController.html":{}}}],["put('profile:id",{"_index":548,"title":{},"body":{"controllers/UserController.html":{}}}],["put('update",{"_index":569,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["put('update')@messagepattern({name",{"_index":565,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["put()@messagepattern({name",{"_index":410,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["readonly",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["redis",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["reflect",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(authentity",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(registerdto",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":103,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registerdto.email",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto.password",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto.username",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["reject",{"_index":468,"title":{},"body":{"injectables/ProductService.html":{}}}],["reject(new",{"_index":474,"title":{},"body":{"injectables/ProductService.html":{}}}],["repository",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["required",{"_index":338,"title":{},"body":{"classes/Product.html":{}}}],["requires",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["reset",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resgister",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolve",{"_index":467,"title":{},"body":{"injectables/ProductService.html":{}}}],["resolve(result",{"_index":471,"title":{},"body":{"injectables/ProductService.html":{}}}],["resolve(updatedproduct",{"_index":482,"title":{},"body":{"injectables/ProductService.html":{}}}],["responsemodel",{"_index":109,"title":{"classes/ResponseModel.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResponseModel.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["result",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/ResponseModel.html":{},"injectables/UserService.html":{}}}],["results",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":671,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["salt",{"_index":213,"title":{},"body":{"entities/AuthPass.html":{}}}],["save",{"_index":441,"title":{},"body":{"injectables/ProductService.html":{}}}],["schema",{"_index":334,"title":{},"body":{"classes/Product.html":{},"modules/ProductModule.html":{}}}],["schemafactory",{"_index":335,"title":{},"body":{"classes/Product.html":{}}}],["schemafactory.createforclass(product",{"_index":341,"title":{},"body":{"classes/Product.html":{},"miscellaneous/variables.html":{}}}],["schemas/product.model",{"_index":426,"title":{},"body":{"modules/ProductModule.html":{},"injectables/ProductService.html":{}}}],["secret",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["shahbaz",{"_index":685,"title":{},"body":{"index.html":{},"properties.html":{}}}],["shop",{"_index":662,"title":{},"body":{"index.html":{},"properties.html":{}}}],["source",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"modules/AuthModule.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/.../main.ts",{"_index":658,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../product.model.ts",{"_index":703,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":16,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:19",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:50",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:79",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:93",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:17",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/dtos/login.dto.ts",{"_index":316,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/dtos/login.dto.ts:12",{"_index":320,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/dtos/login.dto.ts:7",{"_index":318,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/dtos/product.dto.ts",{"_index":282,"title":{},"body":{"classes/CreateDto.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["src/dtos/product.dto.ts:12",{"_index":287,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dtos/product.dto.ts:14",{"_index":288,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dtos/product.dto.ts:18",{"_index":517,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/dtos/product.dto.ts:22",{"_index":520,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/dtos/product.dto.ts:26",{"_index":518,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/dtos/product.dto.ts:28",{"_index":519,"title":{},"body":{"classes/UpdateDto.html":{}}}],["src/dtos/product.dto.ts:8",{"_index":289,"title":{},"body":{"classes/CreateDto.html":{}}}],["src/dtos/register.dto.ts",{"_index":488,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/dtos/register.dto.ts:10",{"_index":502,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/dtos/register.dto.ts:19",{"_index":498,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/dtos/register.dto.ts:23",{"_index":489,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/dtos/update",{"_index":522,"title":{},"body":{"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/entities/auth",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{},"entities/AuthPass.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["src/entities/auth.entity",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/entities/auth.entity.ts",{"_index":147,"title":{},"body":{"entities/AuthEntity.html":{},"coverage.html":{}}}],["src/entities/auth.entity.ts:12",{"_index":180,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:15",{"_index":170,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:18",{"_index":171,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:21",{"_index":174,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:24",{"_index":175,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:27",{"_index":159,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:30",{"_index":176,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:33",{"_index":168,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:36",{"_index":178,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:43",{"_index":165,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/entities/auth.entity.ts:9",{"_index":173,"title":{},"body":{"entities/AuthEntity.html":{}}}],["src/interface/response.model",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["src/interface/response.model.ts",{"_index":508,"title":{},"body":{"classes/ResponseModel.html":{},"coverage.html":{}}}],["src/interface/response.model.ts:2",{"_index":513,"title":{},"body":{"classes/ResponseModel.html":{}}}],["src/interface/response.model.ts:3",{"_index":512,"title":{},"body":{"classes/ResponseModel.html":{}}}],["src/interface/response.model.ts:4",{"_index":511,"title":{},"body":{"classes/ResponseModel.html":{}}}],["src/main.ts",{"_index":603,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/product/product",{"_index":388,"title":{},"body":{"controllers/ProductMicroController.html":{},"coverage.html":{}}}],["src/product/product.controller.ts",{"_index":343,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/product/product.controller.ts:13",{"_index":353,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:18",{"_index":356,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:23",{"_index":351,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:33",{"_index":362,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:38",{"_index":359,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.module.ts",{"_index":425,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/product/product.service.ts",{"_index":431,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/product/product.service.ts:20",{"_index":446,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:36",{"_index":447,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:51",{"_index":440,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:68",{"_index":445,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:78",{"_index":449,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:9",{"_index":438,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:96",{"_index":443,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/schemas/product.model",{"_index":363,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["src/schemas/product.model.ts",{"_index":325,"title":{},"body":{"classes/Product.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/product.model.ts:11",{"_index":333,"title":{},"body":{"classes/Product.html":{}}}],["src/schemas/product.model.ts:14",{"_index":330,"title":{},"body":{"classes/Product.html":{}}}],["src/schemas/product.model.ts:17",{"_index":332,"title":{},"body":{"classes/Product.html":{}}}],["src/schemas/product.model.ts:8",{"_index":327,"title":{},"body":{"classes/Product.html":{}}}],["src/user/user",{"_index":560,"title":{},"body":{"controllers/UserMicroController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":541,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:13",{"_index":546,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:18",{"_index":549,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":574,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":576,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:15",{"_index":578,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:39",{"_index":579,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":577,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":536,"title":{},"body":{"classes/UpdateProfileDto.html":{},"index.html":{}}}],["start:dev",{"_index":674,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":676,"title":{},"body":{"index.html":{}}}],["started",{"_index":660,"title":{"index.html":{}},"body":{}}],["statements",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":157,"title":{},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"classes/CreateDto.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{}}}],["success",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"classes/ResponseModel.html":{},"injectables/UserService.html":{}}}],["super",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":688,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":689,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":611,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":610,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":679,"title":{},"body":{"index.html":{}}}],["test:covcontact",{"_index":682,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":681,"title":{},"body":{"index.html":{}}}],["tests",{"_index":678,"title":{},"body":{"index.html":{}}}],["this.authrepository.find",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authrepository.findone",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.authrepository.save(finduser",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.findbyid(id",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.findbyid(payload.id",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.getallusers",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(login",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(user",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cachemanager.get('cache",{"_index":460,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.cachemanager.set('cache",{"_index":463,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.cachemanager.set('cache_getall",{"_index":457,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.code",{"_index":516,"title":{},"body":{"classes/ResponseModel.html":{}}}],["this.jwtservice.sign",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":216,"title":{},"body":{"entities/AuthPass.html":{}}}],["this.productmodel(product).save",{"_index":470,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productmodel.deleteone",{"_index":487,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productmodel.find().exec",{"_index":462,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productmodel.findone",{"_index":465,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productmodel.findoneandupdate",{"_index":480,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productservice.addproduct(createdto",{"_index":381,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["this.productservice.delete(id",{"_index":386,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["this.productservice.getall",{"_index":371,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["this.productservice.getone(id",{"_index":373,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{}}}],["this.productservice.update(id",{"_index":383,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.update(payload['id",{"_index":422,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["this.result",{"_index":515,"title":{},"body":{"classes/ResponseModel.html":{}}}],["this.success",{"_index":514,"title":{},"body":{"classes/ResponseModel.html":{}}}],["this.userservice.getuserprofile(id",{"_index":556,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserMicroController.html":{}}}],["this.userservice.updateprofile(id",{"_index":558,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateprofile(payload.id",{"_index":570,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["throw",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["title",{"_index":285,"title":{},"body":{"classes/CreateDto.html":{},"classes/Product.html":{},"classes/UpdateDto.html":{}}}],["token",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"classes/Product.html":{},"injectables/UserService.html":{}}}],["true})@joincolumn",{"_index":164,"title":{},"body":{"entities/AuthEntity.html":{}}}],["try",{"_index":469,"title":{},"body":{"injectables/ProductService.html":{}}}],["type",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"classes/CreateDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/RegisterDto.html":{},"classes/ResponseModel.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":701,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":183,"title":{},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([authentity",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["types/cache",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":461,"title":{},"body":{"injectables/ProductService.html":{}}}],["unique",{"_index":184,"title":{},"body":{"entities/AuthEntity.html":{},"classes/Product.html":{}}}],["unit",{"_index":677,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":352,"title":{},"body":{"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{}}}],["unlicensed",{"_index":700,"title":{},"body":{"properties.html":{}}}],["update",{"_index":433,"title":{},"body":{"injectables/ProductService.html":{}}}],["update(id",{"_index":448,"title":{},"body":{"injectables/ProductService.html":{}}}],["update_user_profile",{"_index":566,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["updated_at",{"_index":204,"title":{},"body":{"entities/AuthPass.html":{}}}],["updated_time",{"_index":156,"title":{},"body":{"entities/AuthEntity.html":{}}}],["updatedatecolumn",{"_index":177,"title":{},"body":{"entities/AuthEntity.html":{},"entities/AuthPass.html":{}}}],["updatedproduct",{"_index":481,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatedto",{"_index":294,"title":{"classes/UpdateDto.html":{}},"body":{"classes/CreateDto.html":{},"controllers/ProductController.html":{},"controllers/ProductMicroController.html":{},"injectables/ProductService.html":{},"classes/UpdateDto.html":{},"coverage.html":{}}}],["updatedto.image",{"_index":418,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["updatedto.title",{"_index":420,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["updateprofile",{"_index":543,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"injectables/UserService.html":{}}}],["updateprofile(id",{"_index":547,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateprofile(payload",{"_index":564,"title":{},"body":{"controllers/UserMicroController.html":{}}}],["updateprofiledto",{"_index":521,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateprofiledto.address",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofiledto.first_name",{"_index":588,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofiledto.last_name",{"_index":589,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofiledto.phone_number",{"_index":591,"title":{},"body":{"injectables/UserService.html":{}}}],["useclass",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["usefactory",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["useinterceptors",{"_index":414,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":416,"title":{},"body":{"controllers/ProductMicroController.html":{}}}],["user",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.authpass",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":575,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.id",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.result.id",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.result.username",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.service",{"_index":552,"title":{},"body":{"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user/user.module",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["user_token",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":540,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermicrocontroller",{"_index":559,"title":{"controllers/UserMicroController.html":{}},"body":{"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":9,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"entities/AuthEntity.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterDto.html":{}}}],["username,email",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["userservice",{"_index":551,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"controllers/UserMicroController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":292,"title":{},"body":{"classes/CreateDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDto.html":{},"classes/UpdateProfileDto.html":{},"dependencies.html":{}}}],["value",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":609,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":704,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":696,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":672,"title":{},"body":{"index.html":{}}}],["went",{"_index":476,"title":{},"body":{"injectables/ProductService.html":{}}}],["wrong",{"_index":477,"title":{},"body":{"injectables/ProductService.html":{}}}],["z",{"_index":491,"title":{},"body":{"classes/RegisterDto.html":{}}}],["za",{"_index":500,"title":{},"body":{"classes/RegisterDto.html":{}}}],["zoom",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheInterceptor, CacheModule, Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { APP_INTERCEPTOR } from '@nestjs/core'\nimport { MongooseModule } from '@nestjs/mongoose'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AuthModule } from './auth/auth.module'\nimport { AuthPass } from './entities/auth-pass.entity'\nimport { AuthEntity } from './entities/auth.entity'\nimport { ProductModule } from './product/product.module'\nimport { UserModule } from './user/user.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    CacheModule.register({ isGlobal: true }),\n    MongooseModule.forRoot(process.env.DB_MONGO),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DB_HOST'),\n        port: +configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [AuthEntity, AuthPass],\n        synchronize: true,\n      }),\n      inject: [ConfigService],\n    }),\n    ProductModule,\n    AuthModule,\n    UserModule,\n  ],\n  providers: [{ provide: APP_INTERCEPTOR, useClass: CacheInterceptor }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                getUserByID\n                            \n                            \n                                login\n                            \n                            \n                                Register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('users')@MessagePattern({name: 'get_all_users'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByID\n                        \n                    \n                \n            \n            \n                \ngetUserByID(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@MessagePattern({name: 'find_by_id'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(login: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@MessagePattern({name: 'auth_login'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Register\n                        \n                    \n                \n            \n            \n                \nRegister(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@MessagePattern({name: 'auth_register'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Observable } from 'rxjs'\nimport { ResponseModel } from 'src/interface/response.model'\nimport { Body, Controller, Get, NotFoundException, Post } from '@nestjs/common'\nimport { MessagePattern } from '@nestjs/microservices'\nimport { ApiTags } from '@nestjs/swagger'\nimport { LoginDto } from '../dtos/login.dto'\nimport { RegisterDto } from '../dtos/register.dto'\nimport { AuthPass } from '../entities/auth-pass.entity'\nimport { AuthEntity } from '../entities/auth.entity'\nimport { AuthService } from './auth.service'\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  @MessagePattern({ name: 'auth_register' })\n  Register(@Body() registerDto: RegisterDto): Observable {\n    const user = new AuthEntity()\n    user.username = registerDto.username\n    user.email = registerDto.email\n    const authPass = new AuthPass()\n    authPass.password = registerDto.password\n    user.authPass = authPass\n    return this.authService.register(user)\n  }\n\n  @Post('login')\n  @MessagePattern({ name: 'auth_login' })\n  login(@Body() login: LoginDto): Promise {\n    return this.authService.login(login)\n  }\n\n  @Get()\n  @MessagePattern({ name: 'find_by_id' })\n  getUserByID(id: number): Promise {\n    return this.authService.findById(id)\n  }\n\n  @Get('users')\n  @MessagePattern({ name: 'get_all_users' })\n  async getAllUsers(): Promise {\n    return this.authService.getAllUsers()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AuthEntity.html":{"url":"entities/AuthEntity.html","title":"entity - AuthEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AuthEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/auth.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                authPass\n                            \n                            \n                                created_time\n                            \n                            \n                                email\n                            \n                            \n                                first_name\n                            \n                            \n                                id\n                            \n                            \n                                last_name\n                            \n                            \n                                phone_number\n                            \n                            \n                                profile_image\n                            \n                            \n                                updated_time\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authPass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthPass\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, authPass => authPass.id, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n    Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn\n} from 'typeorm'\nimport { AuthPass } from './auth-pass.entity'\n\n@Entity()\nexport class AuthEntity {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  username: string\n\n  @Column({ unique: true })\n  email: string\n\n  @Column({ nullable: true })\n  first_name: string\n\n  @Column({ nullable: true })\n  last_name: string\n\n  @Column({ nullable: true })\n  phone_number: string\n\n  @Column({ nullable: true })\n  address: string\n\n  @Column({ nullable: true })\n  profile_image: string\n\n  @CreateDateColumn()\n  created_time: Date\n\n  @UpdateDateColumn()\n  updated_time: Date\n\n  @OneToOne(() => AuthPass, (authPass) => authPass.id, {\n    eager: true,\n    cascade: true,\n  })\n  @JoinColumn()\n  authPass: AuthPass\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { config } from 'dotenv'\nimport { AuthPass } from 'src/entities/auth-pass.entity'\nimport { AuthEntity } from 'src/entities/auth.entity'\nimport { Module } from '@nestjs/common'\nimport { JwtModule } from '@nestjs/jwt'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { JwtStrategy } from './jwt.strategy'\n\nconfig()\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([AuthEntity, AuthPass]),\n    JwtModule.register({ secret: process.env.JWT_SECRET }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AuthPass.html":{"url":"entities/AuthPass.html","title":"entity - AuthPass","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AuthPass\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/auth-pass.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth-pass.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth-pass.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth-pass.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/auth-pass.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt'\nimport {\n    BeforeInsert, BeforeUpdate, Column, CreateDateColumn, Entity, PrimaryGeneratedColumn,\n    UpdateDateColumn\n} from 'typeorm'\n\n@Entity()\nexport class AuthPass {\n  @PrimaryGeneratedColumn()\n  id: number\n\n  @Column()\n  password: string\n\n  @CreateDateColumn()\n  created_at: Date\n\n  @UpdateDateColumn()\n  updated_at: Date\n\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword(password: string) {\n    const salt = await bcrypt.genSalt()\n    this.password = await bcrypt.hash(this.password || password, salt)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n                    Find user\nused by jwt.strategy\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:93\n                \n            \n\n\n            \n                \n                    Gets all users\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:50\n                \n            \n\n\n            \n                \n                    Login\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        requires email and password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        ResponseModel\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(authEntity: AuthEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n                    Resgister\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    authEntity\n                                    \n                                                AuthEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        requires username,email and password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        ResponseModel\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt'\nimport { catchError, from, map, Observable } from 'rxjs'\nimport { Repository } from 'typeorm'\nimport {\n    ConflictException, Injectable, NotFoundException, UnauthorizedException\n} from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { LoginDto } from '../dtos/login.dto'\nimport { AuthEntity } from '../entities/auth.entity'\nimport { ResponseModel } from '../interface/response.model'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(AuthEntity)\n    private readonly authRepository: Repository,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /**\n   * Resgister\n   * @param authEntity requires username,email and password\n   * @returns ResponseModel\n   */\n  register(authEntity: AuthEntity): Observable {\n    return from(this.authRepository.save(authEntity)).pipe(\n      map((user) => {\n        return {\n          success: true,\n          result: {\n            username: user.username,\n            email: user.email,\n            token: this.jwtService.sign({ id: user.id, expiresIn: '1h' }),\n          },\n          code: 201,\n        }\n      }),\n      catchError((err) => {\n        throw new ConflictException()\n      }),\n    )\n  }\n\n  /**\n   * Login\n   * @param loginDto requires email and password\n   * @returns ResponseModel\n   */\n  async login(loginDto: LoginDto): Promise {\n    const findUser = await this.authRepository.findOne({\n      where: { email: loginDto.email },\n    })\n    if (!findUser) {\n      return new NotFoundException()\n    }\n    const hashedPassword = findUser.authPass.password\n    const validate = await bcrypt.compare(loginDto.password, hashedPassword)\n    if (!validate) {\n      return new UnauthorizedException()\n    }\n    const user_token = await this.jwtService.signAsync({\n      id: findUser.id,\n      expiresIn: '1h',\n    })\n    return {\n      success: true,\n      result: { id: findUser.id, token: user_token },\n      code: 200,\n    }\n  }\n\n  /**\n   * Find user\n   * used by jwt.strategy\n   * @param id\n   * @returns\n   */\n  async findById(id: number): Promise {\n    console.log(id)\n    const foundUser = await this.authRepository.findOne({ where: { id } })\n    return {\n      success: true,\n      result: foundUser,\n      code: 200,\n    }\n  }\n\n  /**\n   * Gets all users\n   * @returns array\n   */\n  async getAllUsers(): Promise {\n    return this.authRepository.find()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDto.html":{"url":"classes/CreateDto.html","title":"class - CreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                image\n                            \n                            \n                                    Optional\n                                likes\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/product.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dtos/product.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/product.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class CreateDto {\n\n  @IsString()\n  @ApiProperty()\n  title: string\n\n  @IsString()\n  @ApiProperty()\n  image: string\n\n  likes?: number\n}\n\nexport class UpdateDto {\n  id?: number\n\n  @IsString()\n  @ApiProperty()\n  title: string\n\n  @IsString()\n  @ApiProperty()\n  image: string\n\n  likes?: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { config } from 'dotenv'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\nimport { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { AuthService } from './auth.service'\n\nconfig()\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET,\n    })\n  }\n  async validate(payload: any): Promise {\n    const user = await this.authService.findById(payload.id)\n    if (!user) {\n      throw new UnauthorizedException()\n    }\n    return { user: user.result.id, username: user.result.username }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/login.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/login.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, MaxLength } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class LoginDto {\n  @ApiProperty()\n  @IsEmail()\n  email: string\n\n  @ApiProperty()\n  @IsString()\n  @MaxLength(20)\n  password: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/product.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                    Optional\n                                image\n                            \n                            \n                                    Optional\n                                likes\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true, type: Number})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/product.model.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'placeholder'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/product.model.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/product.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/schemas/product.model.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'\n\nexport type ProductDocument = Product & Document\n\n@Schema()\nexport class Product {\n  @Prop({ required: true, unique: true, type: Number })\n  id: Number\n\n  @Prop({ required: true, unique: true })\n  title: string\n\n  @Prop({ default: 'placeholder' })\n  image?: string\n\n  @Prop()\n  likes?: number\n}\nexport const ProductSchema = SchemaFactory.createForClass(Product)\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addProduct\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                getOne\n                            \n                            \n                                    Async\n                                productDeleted\n                            \n                            \n                                    Async\n                                productUpdated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    addProduct(product: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOne\n                        \n                    \n                \n            \n            \n                \ngetOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        productDeleted\n                        \n                    \n                \n            \n            \n                \n                    \n                    productDeleted(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        productUpdated\n                        \n                    \n                \n            \n            \n                \n                    \n                    productUpdated(id: number, product: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/product/product.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    product\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Product } from 'src/schemas/product.model'\nimport { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { CreateDto, UpdateDto } from '../dtos/product.dto'\nimport { ProductService } from './product.service'\n\n@ApiTags('Products')\n@Controller('products')\nexport class ProductController {\n  constructor(private productService: ProductService) {}\n\n  @Get()\n  async getAll() {\n    return this.productService.getAll()\n  }\n\n  @Get(':id')\n  getOne(@Param('id') id: number) {\n    return this.productService.getOne(id)\n  }\n\n  @Post()\n  async addProduct(@Body() product: CreateDto) {\n    const createDto = new Product()\n    createDto.title = product.title\n    createDto.image = product.image\n    createDto.likes = product.likes\n    const result = await this.productService.addProduct(createDto)\n    return result\n  }\n\n  @Put(':id')\n  async productUpdated(@Param('id') id: number, @Body() product: UpdateDto) {\n    return this.productService.update(id || product.id, product)\n  }\n\n  @Delete(':id')\n  async productDeleted(@Param('id') id: number) {\n    const result = await this.productService.delete(id)\n    return result\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductMicroController.html":{"url":"controllers/ProductMicroController.html","title":"controller - ProductMicroController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductMicroController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product-microservice.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                microservice/product\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addProduct\n                            \n                            \n                                getAll\n                            \n                            \n                                getOneProduct\n                            \n                            \n                                    Async\n                                productDeleteRedis\n                            \n                            \n                                    Async\n                                productUpdatedRedis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    addProduct(product: CreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@MessagePattern({name: 'product_created'})\n                \n            \n\n            \n                \n                    Defined in src/product/product-microservice.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                CreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @CacheKey('cache_getAll')@Get()@MessagePattern({name: 'all_product'})\n                \n            \n\n            \n                \n                    Defined in src/product/product-microservice.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOneProduct\n                        \n                    \n                \n            \n            \n                \ngetOneProduct(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@MessagePattern({name: 'get_product'})\n                \n            \n\n            \n                \n                    Defined in src/product/product-microservice.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        productDeleteRedis\n                        \n                    \n                \n            \n            \n                \n                    \n                    productDeleteRedis(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()@MessagePattern({name: 'product_deleted'})\n                \n            \n\n            \n                \n                    Defined in src/product/product-microservice.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        productUpdatedRedis\n                        \n                    \n                \n            \n            \n                \n                    \n                    productUpdatedRedis(payload: object)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@MessagePattern({name: 'product_updated'})\n                \n            \n\n            \n                \n                    Defined in src/product/product-microservice.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Product } from 'src/schemas/product.model'\nimport {\n  Body,\n  CacheInterceptor,\n  CacheKey,\n  Controller,\n  Delete,\n  Get,\n  Post,\n  Put,\n  UseInterceptors,\n} from '@nestjs/common'\nimport { MessagePattern } from '@nestjs/microservices'\nimport { CreateDto, UpdateDto } from '../dtos/product.dto'\nimport { ProductService } from './product.service'\n\n@Controller('microservice/product')\n@UseInterceptors(CacheInterceptor)\nexport class ProductMicroController {\n  constructor(private productService: ProductService) {}\n\n  @CacheKey('cache_getAll')\n  @Get()\n  @MessagePattern({ name: 'all_product' })\n  getAll() {\n    return this.productService.getAll()\n  }\n\n  @Get(':id')\n  @MessagePattern({ name: 'get_product' })\n  getOneProduct(id: number) {\n    return this.productService.getOne(id)\n  }\n\n  @Post()\n  @MessagePattern({ name: 'product_created' })\n  async addProduct(@Body() product: CreateDto) {\n    const createDto = new Product()\n    createDto.title = product.title\n    createDto.image = product.image\n    createDto.likes = product.likes\n    const result = await this.productService.addProduct(createDto)\n\n    return result\n  }\n\n  @Put()\n  @MessagePattern({ name: 'product_updated' })\n  async productUpdatedRedis(payload: object) {\n    const updateDto = new UpdateDto()\n    updateDto.image = payload['image']\n    updateDto.title = payload['title']\n    return this.productService.update(payload['id'], updateDto)\n  }\n\n  @Delete()\n  @MessagePattern({ name: 'product_deleted' })\n  async productDeleteRedis(id: number) {\n    const result = await this.productService.delete(id)\n    return result\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nProductService\n\nProductService\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductMicroController\n                        \n                        \n                            ProductController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { MongooseModule } from '@nestjs/mongoose'\nimport { Product, ProductSchema } from '../schemas/product.model'\nimport { ProductMicroController } from './product-microservice.controller'\nimport { ProductController } from './product.controller'\nimport { ProductService } from './product.service'\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Product.name, schema: ProductSchema }]),\n  ],\n  controllers: [ProductMicroController, ProductController],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addProduct\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache, productModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/product/product.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    addProduct(product: Product)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:51\n                \n            \n\n\n            \n                \n                    Save a product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    product\n                                    \n                                                Product\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        product\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:96\n                \n            \n\n\n            \n                \n                    Delete a product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:68\n                \n            \n\n\n            \n                \n                    Find a PRODUCT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        product\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:20\n                \n            \n\n\n            \n                \n                    Get all Products\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        product\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:36\n                \n            \n\n\n            \n                \n                    Gets product by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, product: UpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/product/product.service.ts:78\n                \n            \n\n\n            \n                \n                    Update a product\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    product\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Cache } from 'cache-manager'\nimport { Model } from 'mongoose'\nimport { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common'\nimport { InjectModel } from '@nestjs/mongoose'\nimport { UpdateDto } from '../dtos/product.dto'\nimport { Product, ProductDocument } from '../schemas/product.model'\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @Inject('CACHE_MANAGER') private readonly cacheManager: Cache,\n    @InjectModel(Product.name)\n    private readonly productModel: Model,\n  ) {}\n\n  /**\n   * Get all Products\n   * @returns product\n   */\n  async getAll(): Promise {\n    // this.cacheManager.set('cache_getAll', 32)\n    const cachedItem = await this.cacheManager.get('cache-getAll')\n    if (cachedItem == undefined) {\n      const result = await this.productModel.find().exec()\n      await this.cacheManager.set('cache-getAll', result, 50)\n      return result\n    }\n    return cachedItem\n  }\n\n  /**\n   * Gets product by id\n   * @param id\n   * @returns\n   */\n  async getOne(id: number): Promise {\n    const cachedItem = await this.cacheManager.get('cache-getAll')\n    if (cachedItem == undefined) {\n      const result = await this.productModel.findOne({ id })\n      await this.cacheManager.set('cache-getAll', result, 50)\n      return result\n    }\n    return cachedItem\n  }\n\n  /**\n   * Save a product\n   * @param product\n   * @returns product\n   */\n  async addProduct(product: Product): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const result = await new this.productModel(product).save()\n        resolve(result)\n      } catch (err) {\n        reject(new HttpException('Something went wrong!', HttpStatus.CONFLICT)),\n          console.log(err.message)\n      }\n    })\n  }\n\n  /**\n   * Find a PRODUCT\n   * @param id\n   * @returns product\n   */\n  async findOne(id: number): Promise {\n    return this.productModel.findOne({ id })\n  }\n\n  /**\n   * Update a product\n   * @param id\n   * @param product\n   * @returns\n   */\n  async update(id: number, product: UpdateDto): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.productModel.findOneAndUpdate({ id: id }, product)\n        const updatedProduct = await this.productModel.findOne({ id })\n        resolve(updatedProduct)\n      } catch (error) {\n        console.log(error.message)\n        reject(new HttpException('Something went wrong!', HttpStatus.CONFLICT))\n      }\n    })\n  }\n\n  /**\n   * Delete a product\n   * @param id\n   * @returns\n   */\n  async delete(id: number) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const findProduct = await this.productModel.findOne({ id })\n        if (findProduct == null) {\n          reject(\n            new HttpException('Something went wrong!', HttpStatus.CONFLICT),\n          )\n        }\n        const result = await this.productModel.deleteOne({ id })\n        resolve(result)\n      } catch (error) {\n        console.log(error.message)\n        reject(new HttpException('Something went wrong!', HttpStatus.CONFLICT))\n      }\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/register.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@MaxLength(20)@Matches(/(?=.*[A-Z])/, {message: 'password must contain atleast one capital letter'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/register.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@MaxLength(20)@Matches(/^[a-zA-Z\\-]+$/, {message: 'username should Not have any digits'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/register.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, Matches, MaxLength, MinLength } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class RegisterDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  @Matches(/^[a-zA-Z\\-]+$/, { message: 'username should Not have any digits' })\n  username: string\n\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  @Matches(/(?=.*[A-Z])/, {\n    message: 'password must contain atleast one capital letter',\n  })\n  password: string\n\n  @ApiProperty()\n  @IsEmail()\n  email: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseModel.html":{"url":"classes/ResponseModel.html","title":"class - ResponseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interface/response.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                result\n                            \n                            \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(success: boolean, result: any, code: number)\n                    \n                \n                        \n                            \n                                Defined in src/interface/response.model.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        success\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        result\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/interface/response.model.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/interface/response.model.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/interface/response.model.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ResponseModel {\n  success: boolean\n  result: any\n  code: number\n  constructor(success: boolean, result: any, code: number) {\n    this.success = success\n    this.result = result\n    this.code = code\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDto.html":{"url":"classes/UpdateDto.html","title":"class - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                id\n                            \n                            \n                                image\n                            \n                            \n                                    Optional\n                                likes\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dtos/product.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/product.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        likes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dtos/product.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/product.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class CreateDto {\n\n  @IsString()\n  @ApiProperty()\n  title: string\n\n  @IsString()\n  @ApiProperty()\n  image: string\n\n  likes?: number\n}\n\nexport class UpdateDto {\n  id?: number\n\n  @IsString()\n  @ApiProperty()\n  title: string\n\n  @IsString()\n  @ApiProperty()\n  image: string\n\n  likes?: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dtos/update-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                first_name\n                            \n                            \n                                    Optional\n                                last_name\n                            \n                            \n                                    Optional\n                                phone_number\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/update-profile.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        first_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/update-profile.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        last_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/update-profile.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phone_number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Matches(/09(1[0-9]|3[1-9]|2[1-9])-?[0-9]{3}-?[0-9]{4}/, {message: 'should be 11 characters and start with 09'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dtos/update-profile.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Matches } from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger'\n\nexport class UpdateProfileDto {\n  @ApiProperty()\n  first_name?: string\n\n  @ApiProperty()\n  last_name?: string\n\n  @ApiProperty()\n  @Matches(/09(1[0-9]|3[1-9]|2[1-9])-?[0-9]{3}-?[0-9]{4}/, {\n    message: 'should be 11 characters and start with 09',\n  })\n  phone_number?: string\n\n  @ApiProperty()\n  address?: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(id: number, updateProfileDto: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProfileDto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { UpdateProfileDto } from 'src/dtos/update-profile.dto'\nimport { ResponseModel } from 'src/interface/response.model'\nimport { Body, Controller, Get, Param, Put } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\nimport { UserService } from './user.service'\n\n@ApiTags('User')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get('profile:id')\n  async getUserProfile(@Param('id') id: number): Promise {\n    return this.userService.getUserProfile(id)\n  }\n\n  @Put('profile:id')\n  async updateProfile(\n    @Param('id') id: number,\n    @Body() updateProfileDto: UpdateProfileDto,\n  ): Promise {\n    return this.userService.updateProfile(id, updateProfileDto)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserMicroController.html":{"url":"controllers/UserMicroController.html","title":"controller - UserMicroController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserMicroController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user-microservice.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                microservice/user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@MessagePattern({name: 'get_user_profile'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-microservice.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update')@MessagePattern({name: 'update_user_profile'})\n                \n            \n\n            \n                \n                    Defined in src/user/user-microservice.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ResponseModel } from 'src/interface/response.model'\nimport { Controller, Get, Put } from '@nestjs/common'\nimport { MessagePattern } from '@nestjs/microservices'\nimport { ApiTags } from '@nestjs/swagger'\nimport { UserService } from './user.service'\n\n@ApiTags('User')\n@Controller('microservice/user')\nexport class UserMicroController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get()\n  @MessagePattern({ name: 'get_user_profile' })\n  async getUserProfile(id: number): Promise {\n    return this.userService.getUserProfile(id)\n  }\n\n  @Put('update')\n  @MessagePattern({ name: 'update_user_profile' })\n  async updateProfile(payload: any): Promise {\n    return this.userService.updateProfile(payload.id, payload.updateProfileDto)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            UserMicroController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthPass } from 'src/entities/auth-pass.entity'\nimport { AuthEntity } from 'src/entities/auth.entity'\nimport { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { UserMicroController } from './user-microservice.controller'\nimport { UserController } from './user.controller'\nimport { UserService } from './user.service'\n\n@Module({\n  imports: [TypeOrmModule.forFeature([AuthEntity, AuthPass])],\n  controllers: [UserController, UserMicroController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(id: number, updateProfileDto: UpdateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProfileDto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UpdateProfileDto } from 'src/dtos/update-profile.dto'\nimport { AuthEntity } from 'src/entities/auth.entity'\nimport { ResponseModel } from 'src/interface/response.model'\nimport { Repository } from 'typeorm'\nimport { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(AuthEntity)\n    private readonly authRepository: Repository,\n  ) {}\n\n  async getUserProfile(id: number): Promise {\n    const findUser = await this.authRepository.findOne({ where: { id: id } })\n    if (!findUser) {\n      return {\n        success: true,\n        result: 'Not found!',\n        code: 404,\n      }\n    }\n    const profile = {\n      id: findUser.id,\n      first_name: findUser.first_name,\n      last_name: findUser.last_name,\n      phone_number: findUser.phone_number,\n      address: findUser.address,\n      profile_image: findUser.profile_image,\n    }\n    return {\n      success: true,\n      result: profile,\n      code: 200,\n    }\n  }\n\n  async updateProfile(\n    id: number,\n    updateProfileDto: UpdateProfileDto,\n  ): Promise {\n    const finduser = await this.authRepository.findOne({ where: { id: id } })\n    if (!finduser) {\n      return {\n        success: true,\n        result: 'Not found!',\n        code: 404,\n      }\n    }\n    finduser.first_name = updateProfileDto.first_name\n    finduser.last_name = updateProfileDto.last_name\n    finduser.address = updateProfileDto.address\n    finduser.phone_number = updateProfileDto.phone_number\n    const updateProfile = await this.authRepository.save(finduser)\n    return {\n      success: true,\n      result: updateProfile,\n      code: 200,\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dtos/product.dto.ts\n            \n            class\n            CreateDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dtos/product.dto.ts\n            \n            class\n            UpdateDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/dtos/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dtos/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entities/auth-pass.entity.ts\n            \n            entity\n            AuthPass\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/auth.entity.ts\n            \n            entity\n            AuthEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interface/response.model.ts\n            \n            class\n            ResponseModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/product-microservice.controller.ts\n            \n            controller\n            ProductMicroController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/schemas/product.model.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/schemas/product.model.ts\n            \n            variable\n            ProductSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user-microservice.controller.ts\n            \n            controller\n            UserMicroController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^9.1.4\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @types/cache-manager : ^4.0.2\n        \n            amqp-connection-manager : ^4.1.7\n        \n            amqplib : ^0.10.3\n        \n            bcrypt : ^5.1.0\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^3.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            ioredis : ^5.2.4\n        \n            mongoose : ^6.6.5\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n\n Microshop \n\nDescription\nShop api with Nest framework\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n# watch mode\n$ npm run start:dev\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n# e2e tests\n$ npm run test:e2e\n# test coverage\n$ npm run test:covContact Me\n\nAuthor - Mehran Shahbaz\nEmail - mehranfmpx@gmail.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : Shop api microservice\n        \n            License : UNLICENSED\n        \n            Author : Mehran Shahbaz\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ProductDocument   (src/.../product.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/product.model.ts\n    \n    \n        \n            \n                \n                    \n                    ProductDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ProductSchema   (src/.../product.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/product.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProductSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Product)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
